
spi_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08001830  08001830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001e5c  08001e5c  00011e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001e60  08001e60  00011e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001e64  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000002c  20000008  08001e68  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  08001e68  00020034  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000054fa  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ef8  00000000  00000000  00025527  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000820  00000000  00000000  00026420  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  00026c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000028dc  00000000  00000000  000273a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000236f  00000000  00000000  00029c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002bff3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002268  00000000  00000000  0002c074  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000008 	.word	0x20000008
 8000158:	00000000 	.word	0x00000000
 800015c:	08001818 	.word	0x08001818

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000000c 	.word	0x2000000c
 8000178:	08001818 	.word	0x08001818

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b982 	b.w	80004a8 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	460c      	mov	r4, r1
 80001c4:	4605      	mov	r5, r0
 80001c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14f      	bne.n	800026c <__udivmoddi4+0xb0>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d96b      	bls.n	80002aa <__udivmoddi4+0xee>
 80001d2:	fab2 fe82 	clz	lr, r2
 80001d6:	f1be 0f00 	cmp.w	lr, #0
 80001da:	d00b      	beq.n	80001f4 <__udivmoddi4+0x38>
 80001dc:	f1ce 0520 	rsb	r5, lr, #32
 80001e0:	fa20 f505 	lsr.w	r5, r0, r5
 80001e4:	fa01 f30e 	lsl.w	r3, r1, lr
 80001e8:	ea45 0c03 	orr.w	ip, r5, r3
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	fa00 f50e 	lsl.w	r5, r0, lr
 80001f4:	0c39      	lsrs	r1, r7, #16
 80001f6:	fbbc f0f1 	udiv	r0, ip, r1
 80001fa:	b2ba      	uxth	r2, r7
 80001fc:	fb01 c310 	mls	r3, r1, r0, ip
 8000200:	fb00 f802 	mul.w	r8, r0, r2
 8000204:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000208:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 800020c:	45a0      	cmp	r8, r4
 800020e:	d909      	bls.n	8000224 <__udivmoddi4+0x68>
 8000210:	19e4      	adds	r4, r4, r7
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8128 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800021a:	45a0      	cmp	r8, r4
 800021c:	f240 8125 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000220:	3802      	subs	r0, #2
 8000222:	443c      	add	r4, r7
 8000224:	ebc8 0404 	rsb	r4, r8, r4
 8000228:	fbb4 f3f1 	udiv	r3, r4, r1
 800022c:	fb01 4c13 	mls	ip, r1, r3, r4
 8000230:	fb03 f202 	mul.w	r2, r3, r2
 8000234:	b2ac      	uxth	r4, r5
 8000236:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 800023a:	428a      	cmp	r2, r1
 800023c:	d909      	bls.n	8000252 <__udivmoddi4+0x96>
 800023e:	19c9      	adds	r1, r1, r7
 8000240:	f103 34ff 	add.w	r4, r3, #4294967295
 8000244:	f080 810f 	bcs.w	8000466 <__udivmoddi4+0x2aa>
 8000248:	428a      	cmp	r2, r1
 800024a:	f240 810c 	bls.w	8000466 <__udivmoddi4+0x2aa>
 800024e:	3b02      	subs	r3, #2
 8000250:	4439      	add	r1, r7
 8000252:	1a8a      	subs	r2, r1, r2
 8000254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000258:	2100      	movs	r1, #0
 800025a:	2e00      	cmp	r6, #0
 800025c:	d063      	beq.n	8000326 <__udivmoddi4+0x16a>
 800025e:	fa22 f20e 	lsr.w	r2, r2, lr
 8000262:	2300      	movs	r3, #0
 8000264:	e886 000c 	stmia.w	r6, {r2, r3}
 8000268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026c:	428b      	cmp	r3, r1
 800026e:	d907      	bls.n	8000280 <__udivmoddi4+0xc4>
 8000270:	2e00      	cmp	r6, #0
 8000272:	d056      	beq.n	8000322 <__udivmoddi4+0x166>
 8000274:	2100      	movs	r1, #0
 8000276:	e886 0011 	stmia.w	r6, {r0, r4}
 800027a:	4608      	mov	r0, r1
 800027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000280:	fab3 f183 	clz	r1, r3
 8000284:	2900      	cmp	r1, #0
 8000286:	f040 8093 	bne.w	80003b0 <__udivmoddi4+0x1f4>
 800028a:	42a3      	cmp	r3, r4
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd8>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fe 	bhi.w	8000490 <__udivmoddi4+0x2d4>
 8000294:	1a85      	subs	r5, r0, r2
 8000296:	eb64 0303 	sbc.w	r3, r4, r3
 800029a:	469c      	mov	ip, r3
 800029c:	2001      	movs	r0, #1
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d041      	beq.n	8000326 <__udivmoddi4+0x16a>
 80002a2:	e886 1020 	stmia.w	r6, {r5, ip}
 80002a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002aa:	b912      	cbnz	r2, 80002b2 <__udivmoddi4+0xf6>
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb7 f7f2 	udiv	r7, r7, r2
 80002b2:	fab7 fe87 	clz	lr, r7
 80002b6:	f1be 0f00 	cmp.w	lr, #0
 80002ba:	d136      	bne.n	800032a <__udivmoddi4+0x16e>
 80002bc:	1be4      	subs	r4, r4, r7
 80002be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c2:	fa1f f987 	uxth.w	r9, r7
 80002c6:	2101      	movs	r1, #1
 80002c8:	fbb4 f3f8 	udiv	r3, r4, r8
 80002cc:	fb08 4413 	mls	r4, r8, r3, r4
 80002d0:	fb09 f203 	mul.w	r2, r9, r3
 80002d4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80002d8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80002dc:	42a2      	cmp	r2, r4
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x134>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x132>
 80002e8:	42a2      	cmp	r2, r4
 80002ea:	f200 80d3 	bhi.w	8000494 <__udivmoddi4+0x2d8>
 80002ee:	4603      	mov	r3, r0
 80002f0:	1aa4      	subs	r4, r4, r2
 80002f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002f6:	fb08 4810 	mls	r8, r8, r0, r4
 80002fa:	fb09 f900 	mul.w	r9, r9, r0
 80002fe:	b2ac      	uxth	r4, r5
 8000300:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000304:	4591      	cmp	r9, r2
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x15c>
 8000308:	19d2      	adds	r2, r2, r7
 800030a:	f100 34ff 	add.w	r4, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x15a>
 8000310:	4591      	cmp	r9, r2
 8000312:	f200 80ba 	bhi.w	800048a <__udivmoddi4+0x2ce>
 8000316:	4620      	mov	r0, r4
 8000318:	ebc9 0202 	rsb	r2, r9, r2
 800031c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000320:	e79b      	b.n	800025a <__udivmoddi4+0x9e>
 8000322:	4631      	mov	r1, r6
 8000324:	4630      	mov	r0, r6
 8000326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032a:	fa07 f70e 	lsl.w	r7, r7, lr
 800032e:	f1ce 0c20 	rsb	ip, lr, #32
 8000332:	fa24 f30c 	lsr.w	r3, r4, ip
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	fbb3 faf8 	udiv	sl, r3, r8
 800033e:	fa1f f987 	uxth.w	r9, r7
 8000342:	fb08 351a 	mls	r5, r8, sl, r3
 8000346:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034a:	fa04 f40e 	lsl.w	r4, r4, lr
 800034e:	fb0a fb09 	mul.w	fp, sl, r9
 8000352:	ea4c 0c04 	orr.w	ip, ip, r4
 8000356:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800035a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 800035e:	459b      	cmp	fp, r3
 8000360:	fa00 f50e 	lsl.w	r5, r0, lr
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x1c0>
 8000366:	19db      	adds	r3, r3, r7
 8000368:	f10a 32ff 	add.w	r2, sl, #4294967295
 800036c:	f080 808b 	bcs.w	8000486 <__udivmoddi4+0x2ca>
 8000370:	459b      	cmp	fp, r3
 8000372:	f240 8088 	bls.w	8000486 <__udivmoddi4+0x2ca>
 8000376:	f1aa 0a02 	sub.w	sl, sl, #2
 800037a:	443b      	add	r3, r7
 800037c:	ebcb 0303 	rsb	r3, fp, r3
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	fb00 f409 	mul.w	r4, r0, r9
 800038c:	fa1f fc8c 	uxth.w	ip, ip
 8000390:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000394:	429c      	cmp	r4, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x1ec>
 8000398:	19db      	adds	r3, r3, r7
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	d26e      	bcs.n	800047e <__udivmoddi4+0x2c2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d96c      	bls.n	800047e <__udivmoddi4+0x2c2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1b1c      	subs	r4, r3, r4
 80003aa:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80003ae:	e78b      	b.n	80002c8 <__udivmoddi4+0x10c>
 80003b0:	f1c1 0e20 	rsb	lr, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa24 f70e 	lsr.w	r7, r4, lr
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbb7 faf9 	udiv	sl, r7, r9
 80003ca:	fa1f f38c 	uxth.w	r3, ip
 80003ce:	fb09 771a 	mls	r7, r9, sl, r7
 80003d2:	fa20 f80e 	lsr.w	r8, r0, lr
 80003d6:	408c      	lsls	r4, r1
 80003d8:	fb0a f503 	mul.w	r5, sl, r3
 80003dc:	ea48 0404 	orr.w	r4, r8, r4
 80003e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80003e4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80003e8:	42bd      	cmp	r5, r7
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 fb01 	lsl.w	fp, r0, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f4:	eb17 070c 	adds.w	r7, r7, ip
 80003f8:	f10a 30ff 	add.w	r0, sl, #4294967295
 80003fc:	d241      	bcs.n	8000482 <__udivmoddi4+0x2c6>
 80003fe:	42bd      	cmp	r5, r7
 8000400:	d93f      	bls.n	8000482 <__udivmoddi4+0x2c6>
 8000402:	f1aa 0a02 	sub.w	sl, sl, #2
 8000406:	4467      	add	r7, ip
 8000408:	1b7f      	subs	r7, r7, r5
 800040a:	fbb7 f5f9 	udiv	r5, r7, r9
 800040e:	fb09 7715 	mls	r7, r9, r5, r7
 8000412:	fb05 f303 	mul.w	r3, r5, r3
 8000416:	b2a4      	uxth	r4, r4
 8000418:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800041c:	42bb      	cmp	r3, r7
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb17 070c 	adds.w	r7, r7, ip
 8000424:	f105 30ff 	add.w	r0, r5, #4294967295
 8000428:	d227      	bcs.n	800047a <__udivmoddi4+0x2be>
 800042a:	42bb      	cmp	r3, r7
 800042c:	d925      	bls.n	800047a <__udivmoddi4+0x2be>
 800042e:	3d02      	subs	r5, #2
 8000430:	4467      	add	r7, ip
 8000432:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	1aff      	subs	r7, r7, r3
 800043c:	454f      	cmp	r7, r9
 800043e:	4645      	mov	r5, r8
 8000440:	464c      	mov	r4, r9
 8000442:	d314      	bcc.n	800046e <__udivmoddi4+0x2b2>
 8000444:	d029      	beq.n	800049a <__udivmoddi4+0x2de>
 8000446:	b366      	cbz	r6, 80004a2 <__udivmoddi4+0x2e6>
 8000448:	ebbb 0305 	subs.w	r3, fp, r5
 800044c:	eb67 0704 	sbc.w	r7, r7, r4
 8000450:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000454:	40cb      	lsrs	r3, r1
 8000456:	40cf      	lsrs	r7, r1
 8000458:	ea4e 0303 	orr.w	r3, lr, r3
 800045c:	e886 0088 	stmia.w	r6, {r3, r7}
 8000460:	2100      	movs	r1, #0
 8000462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000466:	4623      	mov	r3, r4
 8000468:	e6f3      	b.n	8000252 <__udivmoddi4+0x96>
 800046a:	4618      	mov	r0, r3
 800046c:	e6da      	b.n	8000224 <__udivmoddi4+0x68>
 800046e:	ebb8 0502 	subs.w	r5, r8, r2
 8000472:	eb69 040c 	sbc.w	r4, r9, ip
 8000476:	3801      	subs	r0, #1
 8000478:	e7e5      	b.n	8000446 <__udivmoddi4+0x28a>
 800047a:	4605      	mov	r5, r0
 800047c:	e7d9      	b.n	8000432 <__udivmoddi4+0x276>
 800047e:	4610      	mov	r0, r2
 8000480:	e792      	b.n	80003a8 <__udivmoddi4+0x1ec>
 8000482:	4682      	mov	sl, r0
 8000484:	e7c0      	b.n	8000408 <__udivmoddi4+0x24c>
 8000486:	4692      	mov	sl, r2
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1c0>
 800048a:	3802      	subs	r0, #2
 800048c:	443a      	add	r2, r7
 800048e:	e743      	b.n	8000318 <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e704      	b.n	800029e <__udivmoddi4+0xe2>
 8000494:	3b02      	subs	r3, #2
 8000496:	443c      	add	r4, r7
 8000498:	e72a      	b.n	80002f0 <__udivmoddi4+0x134>
 800049a:	45c3      	cmp	fp, r8
 800049c:	d3e7      	bcc.n	800046e <__udivmoddi4+0x2b2>
 800049e:	463c      	mov	r4, r7
 80004a0:	e7d1      	b.n	8000446 <__udivmoddi4+0x28a>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080004a8 <__aeabi_idiv0>:
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop

080004ac <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e07e      	b.n	80005c6 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004c8:	2201      	movs	r2, #1
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d16d      	bne.n	80005c0 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	4619      	mov	r1, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d003      	beq.n	8000522 <GPIO_Init+0x76>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d136      	bne.n	8000590 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	4619      	mov	r1, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	889b      	ldrh	r3, [r3, #4]
 8000554:	b29a      	uxth	r2, r3
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	b29b      	uxth	r3, r3
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	b29b      	uxth	r3, r3
 8000562:	43db      	mvns	r3, r3
 8000564:	b29b      	uxth	r3, r3
 8000566:	4013      	ands	r3, r2
 8000568:	b29a      	uxth	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	889b      	ldrh	r3, [r3, #4]
 8000572:	b29b      	uxth	r3, r3
 8000574:	b21a      	sxth	r2, r3
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	799b      	ldrb	r3, [r3, #6]
 800057a:	4619      	mov	r1, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	b29b      	uxth	r3, r3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	b21b      	sxth	r3, r3
 8000586:	4313      	orrs	r3, r2
 8000588:	b21b      	sxth	r3, r3
 800058a:	b29a      	uxth	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	b29b      	uxth	r3, r3
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	2103      	movs	r1, #3
 800059c:	fa01 f303 	lsl.w	r3, r1, r3
 80005a0:	43db      	mvns	r3, r3
 80005a2:	401a      	ands	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	79db      	ldrb	r3, [r3, #7]
 80005b0:	4619      	mov	r1, r3
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	431a      	orrs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	f67f af7d 	bls.w	80004c8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80005ce:	bf00      	nop
 80005d0:	371c      	adds	r7, #28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]
 80005e4:	4613      	mov	r3, r2
 80005e6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f0:	787a      	ldrb	r2, [r7, #1]
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	f003 0307 	and.w	r3, r3, #7
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	08db      	lsrs	r3, r3, #3
 8000604:	b29b      	uxth	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	b29b      	uxth	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3208      	adds	r2, #8
 8000614:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	210f      	movs	r1, #15
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43db      	mvns	r3, r3
 8000628:	ea02 0103 	and.w	r1, r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f100 0208 	add.w	r2, r0, #8
 8000632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000636:	887b      	ldrh	r3, [r7, #2]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	b29b      	uxth	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3208      	adds	r2, #8
 8000642:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4313      	orrs	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	b29b      	uxth	r3, r3
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3208      	adds	r2, #8
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d006      	beq.n	8000688 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800067a:	4909      	ldr	r1, [pc, #36]	; (80006a0 <RCC_AHBPeriphClockCmd+0x38>)
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <RCC_AHBPeriphClockCmd+0x38>)
 800067e:	69da      	ldr	r2, [r3, #28]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000686:	e006      	b.n	8000696 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000688:	4905      	ldr	r1, [pc, #20]	; (80006a0 <RCC_AHBPeriphClockCmd+0x38>)
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <RCC_AHBPeriphClockCmd+0x38>)
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	43db      	mvns	r3, r3
 8000692:	4013      	ands	r3, r2
 8000694:	61cb      	str	r3, [r1, #28]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40023800 	.word	0x40023800

080006a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d006      	beq.n	80006c4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <RCC_APB2PeriphClockCmd+0x38>)
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <RCC_APB2PeriphClockCmd+0x38>)
 80006ba:	6a1a      	ldr	r2, [r3, #32]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4313      	orrs	r3, r2
 80006c0:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006c2:	e006      	b.n	80006d2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006c4:	4905      	ldr	r1, [pc, #20]	; (80006dc <RCC_APB2PeriphClockCmd+0x38>)
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <RCC_APB2PeriphClockCmd+0x38>)
 80006c8:	6a1a      	ldr	r2, [r3, #32]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	43db      	mvns	r3, r3
 80006ce:	4013      	ands	r3, r2
 80006d0:	620b      	str	r3, [r1, #32]
  }
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40023800 	.word	0x40023800

080006e0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80006f4:	89fb      	ldrh	r3, [r7, #14]
 80006f6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80006fa:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	885b      	ldrh	r3, [r3, #2]
 8000704:	4313      	orrs	r3, r2
 8000706:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800070c:	4313      	orrs	r3, r2
 800070e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000714:	4313      	orrs	r3, r2
 8000716:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800071c:	4313      	orrs	r3, r2
 800071e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000724:	4313      	orrs	r3, r2
 8000726:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800072c:	4313      	orrs	r3, r2
 800072e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000734:	4313      	orrs	r3, r2
 8000736:	b29a      	uxth	r2, r3
 8000738:	89fb      	ldrh	r3, [r7, #14]
 800073a:	4313      	orrs	r3, r2
 800073c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	89fa      	ldrh	r2, [r7, #14]
 8000742:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	8b9b      	ldrh	r3, [r3, #28]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	8a1a      	ldrh	r2, [r3, #16]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	821a      	strh	r2, [r3, #16]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	b29b      	uxth	r3, r3
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	b29a      	uxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800078a:	e007      	b.n	800079c <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000796:	b29a      	uxth	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	801a      	strh	r2, [r3, #0]
  }
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	891b      	ldrh	r3, [r3, #8]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	887b      	ldrh	r3, [r7, #2]
 80007c0:	4013      	ands	r3, r2
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d002      	beq.n	80007ce <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e001      	b.n	80007d2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	81bb      	strh	r3, [r7, #12]
 80007f4:	2300      	movs	r3, #0
 80007f6:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	8a1b      	ldrh	r3, [r3, #16]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	4013      	ands	r3, r2
 8000802:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	899b      	ldrh	r3, [r3, #12]
 8000808:	b29a      	uxth	r2, r3
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	4013      	ands	r3, r2
 800080e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000810:	89bb      	ldrh	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <TIM_GetITStatus+0x42>
 8000816:	897b      	ldrh	r3, [r7, #10]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e001      	b.n	8000826 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	43db      	mvns	r3, r3
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	821a      	strh	r2, [r3, #16]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <TIM7_IRQHandler>:
static uint16_t backlitModulo = 0;
static uint16_t shimmerModulo = 0;
static uint16_t shimmerDutyCycle = SHIMMER_DUTY_CYCLE;

void TIM7_IRQHandler(void)
{
 8000854:	b598      	push	{r3, r4, r7, lr}
 8000856:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) == SET)
 8000858:	2101      	movs	r1, #1
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <TIM7_IRQHandler+0x64>)
 800085c:	f7ff ffc0 	bl	80007e0 <TIM_GetITStatus>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d126      	bne.n	80008b4 <TIM7_IRQHandler+0x60>
	{
		backlitTimer++;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <TIM7_IRQHandler+0x68>)
 8000868:	cb18      	ldmia	r3, {r3, r4}
 800086a:	3301      	adds	r3, #1
 800086c:	f144 0400 	adc.w	r4, r4, #0
 8000870:	4a12      	ldr	r2, [pc, #72]	; (80008bc <TIM7_IRQHandler+0x68>)
 8000872:	e882 0018 	stmia.w	r2, {r3, r4}

		shimmerModulo = backlitTimer % SHIMMER_PERIOD;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <TIM7_IRQHandler+0x68>)
 8000878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800087c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	f7ff fc82 	bl	800018c <__aeabi_uldivmod>
 8000888:	461c      	mov	r4, r3
 800088a:	4613      	mov	r3, r2
 800088c:	b29a      	uxth	r2, r3
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <TIM7_IRQHandler+0x6c>)
 8000890:	801a      	strh	r2, [r3, #0]

		if(shimmerDutyCycle < shimmerModulo)
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <TIM7_IRQHandler+0x70>)
 8000894:	881a      	ldrh	r2, [r3, #0]
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <TIM7_IRQHandler+0x6c>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d203      	bcs.n	80008a6 <TIM7_IRQHandler+0x52>
		{
			gShimmerFlag = 0;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <TIM7_IRQHandler+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e002      	b.n	80008ac <TIM7_IRQHandler+0x58>
		}
		else
		{
			gShimmerFlag = 1;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <TIM7_IRQHandler+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
				GPIOB->BSRRH = GPIO_Pin_0;
				GPIOA->BSRRH = GPIO_Pin_7;
			}
		}*/

		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80008ac:	2101      	movs	r1, #1
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <TIM7_IRQHandler+0x64>)
 80008b0:	f7ff ffc0 	bl	8000834 <TIM_ClearITPendingBit>
	}
}
 80008b4:	bf00      	nop
 80008b6:	bd98      	pop	{r3, r4, r7, pc}
 80008b8:	40001400 	.word	0x40001400
 80008bc:	20000028 	.word	0x20000028
 80008c0:	20000030 	.word	0x20000030
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000024 	.word	0x20000024

080008cc <initSPI2>:
#include "mcu.h"

//TODO rework to STM32L mcu's

void initSPI2(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80008d2:	2101      	movs	r1, #1
 80008d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80008d8:	f7ff fee4 	bl	80006a4 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80008dc:	2101      	movs	r1, #1
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fec2 	bl	8000668 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80008e4:	2302      	movs	r3, #2
 80008e6:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80008e8:	2300      	movs	r3, #0
 80008ea:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80008ec:	2303      	movs	r3, #3
 80008ee:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	77fb      	strb	r3, [r7, #31]

	//PB3 - SPI2_SCK
	//PB4 - SPI2_MISO
	//PB5 - SPI2_MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
 80008f4:	2338      	movs	r3, #56	; 0x38
 80008f6:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4819      	ldr	r0, [pc, #100]	; (8000964 <initSPI2+0x98>)
 8000900:	f7ff fdd4 	bl	80004ac <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
 8000904:	2205      	movs	r2, #5
 8000906:	2103      	movs	r1, #3
 8000908:	4816      	ldr	r0, [pc, #88]	; (8000964 <initSPI2+0x98>)
 800090a:	f7ff fe65 	bl	80005d8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
 800090e:	2205      	movs	r2, #5
 8000910:	2104      	movs	r1, #4
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <initSPI2+0x98>)
 8000914:	f7ff fe60 	bl	80005d8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);
 8000918:	2205      	movs	r2, #5
 800091a:	2105      	movs	r1, #5
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <initSPI2+0x98>)
 800091e:	f7ff fe5b 	bl	80005d8 <GPIO_PinAFConfig>

	SPI_InitTypeDef  SPI_InitStructure;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000922:	2300      	movs	r3, #0
 8000924:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000926:	2300      	movs	r3, #0
 8000928:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800092a:	2300      	movs	r3, #0
 800092c:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 800092e:	2301      	movs	r3, #1
 8000930:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000932:	2300      	movs	r3, #0
 8000934:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000936:	2300      	movs	r3, #0
 8000938:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800093a:	2300      	movs	r3, #0
 800093c:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800093e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000942:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	81fb      	strh	r3, [r7, #14]

	/* Apply SPI configuration after enabling it */
	SPI_Init(SPI1, &SPI_InitStructure);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <initSPI2+0x9c>)
 8000950:	f7ff fec6 	bl	80006e0 <SPI_Init>
	/* SPI Peripheral Enable */
	SPI_Cmd(SPI1, ENABLE);
 8000954:	2101      	movs	r1, #1
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <initSPI2+0x9c>)
 8000958:	f7ff ff06 	bl	8000768 <SPI_Cmd>
}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020400 	.word	0x40020400
 8000968:	40013000 	.word	0x40013000

0800096c <readWriteSPI2>:

unsigned char readWriteSPI2(unsigned char txData)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	SPI1->DR = txData;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <readWriteSPI2+0x44>)
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	b292      	uxth	r2, r2
 800097c:	819a      	strh	r2, [r3, #12]
	// wait until TXE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 800097e:	bf00      	nop
 8000980:	2102      	movs	r1, #2
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <readWriteSPI2+0x44>)
 8000984:	f7ff ff10 	bl	80007a8 <SPI_I2S_GetFlagStatus>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d1f8      	bne.n	8000980 <readWriteSPI2+0x14>
	// wait until RXNE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 800098e:	bf00      	nop
 8000990:	2101      	movs	r1, #1
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <readWriteSPI2+0x44>)
 8000994:	f7ff ff08 	bl	80007a8 <SPI_I2S_GetFlagStatus>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d1f8      	bne.n	8000990 <readWriteSPI2+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = SPI1->DR;
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <readWriteSPI2+0x44>)
 80009a0:	899b      	ldrh	r3, [r3, #12]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	73fb      	strb	r3, [r7, #15]

	return rxData;
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40013000 	.word	0x40013000

080009b4 <initCS_Pin>:

void initCS_Pin(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80009ba:	2101      	movs	r1, #1
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fe53 	bl	8000668 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80009c6:	2303      	movs	r3, #3
 80009c8:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80009d4:	2301      	movs	r3, #1
 80009d6:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <initCS_Pin+0x38>)
 80009de:	f7ff fd65 	bl	80004ac <GPIO_Init>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40020400 	.word	0x40020400

080009f0 <initCD_Pin>:

void initCD_Pin(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80009f6:	2101      	movs	r1, #1
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff fe35 	bl	8000668 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000a02:	2303      	movs	r3, #3
 8000a04:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a10:	2301      	movs	r3, #1
 8000a12:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <initCD_Pin+0x38>)
 8000a1a:	f7ff fd47 	bl	80004ac <GPIO_Init>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40020000 	.word	0x40020000

08000a2c <cd_set>:

void cd_set(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_8;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <cd_set+0x14>)
 8000a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a36:	831a      	strh	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	40020000 	.word	0x40020000

08000a44 <cd_reset>:

void cd_reset(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_8;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <cd_reset+0x14>)
 8000a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4e:	835a      	strh	r2, [r3, #26]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40020000 	.word	0x40020000

08000a5c <initRES_Pin>:

void initRES_Pin(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000a62:	2101      	movs	r1, #1
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fdff 	bl	8000668 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <initRES_Pin+0x38>)
 8000a86:	f7ff fd11 	bl	80004ac <GPIO_Init>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000

08000a98 <res_set>:

void res_set(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_9;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <res_set+0x14>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa2:	831a      	strh	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40020000 	.word	0x40020000

08000ab0 <res_reset>:

void res_reset(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_9;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <res_reset+0x14>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aba:	835a      	strh	r2, [r3, #26]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8000acc:	f7ff fff0 	bl	8000ab0 <res_reset>
	Delay(10000);
 8000ad0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ad4:	f000 fd4a 	bl	800156c <Delay>

	res_set();
 8000ad8:	f7ff ffde 	bl	8000a98 <res_set>
	Delay(10000);
 8000adc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ae0:	f000 fd44 	bl	800156c <Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8000af2:	f7ff ffa7 	bl	8000a44 <cd_reset>

	readWriteSPI2(address);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff37 	bl	800096c <readWriteSPI2>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop

08000b08 <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8000b12:	f7ff ff8b 	bl	8000a2c <cd_set>

	readWriteSPI2(parameter);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff27 	bl	800096c <readWriteSPI2>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop

08000b28 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8000b38:	f7ff ff78 	bl	8000a2c <cd_set>

	readWriteSPI2(dataByte1);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff14 	bl	800096c <readWriteSPI2>
	readWriteSPI2(dataByte2);
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff10 	bl	800096c <readWriteSPI2>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <lcdInitialise>:

// Initialise the display with the require screen orientation
void lcdInitialise(uint8_t orientation)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 8000b5e:	f7ff ffb3 	bl	8000ac8 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8000b62:	2011      	movs	r0, #17
 8000b64:	f7ff ffc0 	bl	8000ae8 <lcdWriteCommand>
    Delay(10000); // Wait for the screen to wake up
 8000b68:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b6c:	f000 fcfe 	bl	800156c <Delay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8000b70:	203a      	movs	r0, #58	; 0x3a
 8000b72:	f7ff ffb9 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8000b76:	2005      	movs	r0, #5
 8000b78:	f7ff ffc6 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8000b7c:	2026      	movs	r0, #38	; 0x26
 8000b7e:	f7ff ffb3 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8000b82:	2004      	movs	r0, #4
 8000b84:	f7ff ffc0 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8000b88:	20f2      	movs	r0, #242	; 0xf2
 8000b8a:	f7ff ffad 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ffba 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8000b94:	20e0      	movs	r0, #224	; 0xe0
 8000b96:	f7ff ffa7 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8000b9a:	203f      	movs	r0, #63	; 0x3f
 8000b9c:	f7ff ffb4 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8000ba0:	2025      	movs	r0, #37	; 0x25
 8000ba2:	f7ff ffb1 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8000ba6:	201c      	movs	r0, #28
 8000ba8:	f7ff ffae 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8000bac:	201e      	movs	r0, #30
 8000bae:	f7ff ffab 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8000bb2:	2020      	movs	r0, #32
 8000bb4:	f7ff ffa8 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f7ff ffa5 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8000bbe:	202a      	movs	r0, #42	; 0x2a
 8000bc0:	f7ff ffa2 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8000bc4:	2090      	movs	r0, #144	; 0x90
 8000bc6:	f7ff ff9f 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8000bca:	2024      	movs	r0, #36	; 0x24
 8000bcc:	f7ff ff9c 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8000bd0:	2011      	movs	r0, #17
 8000bd2:	f7ff ff99 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ff96 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff93 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ff90 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ff8d 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff8a 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8000bf4:	20e1      	movs	r0, #225	; 0xe1
 8000bf6:	f7ff ff77 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	f7ff ff84 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8000c00:	2020      	movs	r0, #32
 8000c02:	f7ff ff81 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 8000c06:	2020      	movs	r0, #32
 8000c08:	f7ff ff7e 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8000c0c:	2020      	movs	r0, #32
 8000c0e:	f7ff ff7b 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8000c12:	2005      	movs	r0, #5
 8000c14:	f7ff ff78 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff ff75 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8000c1e:	2015      	movs	r0, #21
 8000c20:	f7ff ff72 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8000c24:	20a7      	movs	r0, #167	; 0xa7
 8000c26:	f7ff ff6f 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 8000c2a:	203d      	movs	r0, #61	; 0x3d
 8000c2c:	f7ff ff6c 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8000c30:	2018      	movs	r0, #24
 8000c32:	f7ff ff69 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8000c36:	2025      	movs	r0, #37	; 0x25
 8000c38:	f7ff ff66 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8000c3c:	202a      	movs	r0, #42	; 0x2a
 8000c3e:	f7ff ff63 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8000c42:	202b      	movs	r0, #43	; 0x2b
 8000c44:	f7ff ff60 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8000c48:	202b      	movs	r0, #43	; 0x2b
 8000c4a:	f7ff ff5d 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8000c4e:	203a      	movs	r0, #58	; 0x3a
 8000c50:	f7ff ff5a 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8000c54:	20b1      	movs	r0, #177	; 0xb1
 8000c56:	f7ff ff47 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8000c5a:	2008      	movs	r0, #8
 8000c5c:	f7ff ff54 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8000c60:	2008      	movs	r0, #8
 8000c62:	f7ff ff51 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8000c66:	20b4      	movs	r0, #180	; 0xb4
 8000c68:	f7ff ff3e 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000c6c:	2007      	movs	r0, #7
 8000c6e:	f7ff ff4b 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8000c72:	20c0      	movs	r0, #192	; 0xc0
 8000c74:	f7ff ff38 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f7ff ff45 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff ff42 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8000c84:	20c1      	movs	r0, #193	; 0xc1
 8000c86:	f7ff ff2f 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff ff3c 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8000c90:	20c5      	movs	r0, #197	; 0xc5
 8000c92:	f7ff ff29 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8000c96:	2050      	movs	r0, #80	; 0x50
 8000c98:	f7ff ff36 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8000c9c:	205b      	movs	r0, #91	; 0x5b
 8000c9e:	f7ff ff33 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8000ca2:	20c7      	movs	r0, #199	; 0xc7
 8000ca4:	f7ff ff20 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8000ca8:	2040      	movs	r0, #64	; 0x40
 8000caa:	f7ff ff2d 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8000cae:	202a      	movs	r0, #42	; 0x2a
 8000cb0:	f7ff ff1a 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x1f); // XSH
 8000cb4:	201f      	movs	r0, #31
 8000cb6:	f7ff ff27 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff ff24 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x1f); // XEH
 8000cc0:	201f      	movs	r0, #31
 8000cc2:	f7ff ff21 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8000cc6:	207f      	movs	r0, #127	; 0x7f
 8000cc8:	f7ff ff1e 	bl	8000b08 <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8000ccc:	202b      	movs	r0, #43	; 0x2b
 8000cce:	f7ff ff0b 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ff18 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x1f);
 8000cd8:	201f      	movs	r0, #31
 8000cda:	f7ff ff15 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff12 	bl	8000b08 <lcdWriteParameter>
    lcdWriteParameter(0x9f); // 128 pixels y
 8000ce4:	209f      	movs	r0, #159	; 0x9f
 8000ce6:	f7ff ff0f 	bl	8000b08 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8000cea:	2036      	movs	r0, #54	; 0x36
 8000cec:	f7ff fefc 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff08 	bl	8000b08 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8000cf8:	2029      	movs	r0, #41	; 0x29
 8000cfa:	f7ff fef5 	bl	8000ae8 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8000cfe:	202c      	movs	r0, #44	; 0x2c
 8000d00:	f7ff fef2 	bl	8000ae8 <lcdWriteCommand>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8000d16:	202a      	movs	r0, #42	; 0x2a
 8000d18:	f7ff fee6 	bl	8000ae8 <lcdWriteCommand>
	    lcdWriteParameter(0x1f); // XSH
 8000d1c:	201f      	movs	r0, #31
 8000d1e:	f7ff fef3 	bl	8000b08 <lcdWriteParameter>
	    lcdWriteParameter(0x00); // XSL
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fef0 	bl	8000b08 <lcdWriteParameter>
	    lcdWriteParameter(0x1f); // XEH
 8000d28:	201f      	movs	r0, #31
 8000d2a:	f7ff feed 	bl	8000b08 <lcdWriteParameter>
	    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8000d2e:	207f      	movs	r0, #127	; 0x7f
 8000d30:	f7ff feea 	bl	8000b08 <lcdWriteParameter>

	    lcdWriteCommand(SET_PAGE_ADDRESS);
 8000d34:	202b      	movs	r0, #43	; 0x2b
 8000d36:	f7ff fed7 	bl	8000ae8 <lcdWriteCommand>
	    lcdWriteParameter(0x00);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fee4 	bl	8000b08 <lcdWriteParameter>
	    lcdWriteParameter(0x1f);
 8000d40:	201f      	movs	r0, #31
 8000d42:	f7ff fee1 	bl	8000b08 <lcdWriteParameter>
	    lcdWriteParameter(0x00);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fede 	bl	8000b08 <lcdWriteParameter>
	    lcdWriteParameter(0x9f); // 128 pixels y
 8000d4c:	209f      	movs	r0, #159	; 0x9f
 8000d4e:	f7ff fedb 	bl	8000b08 <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8000d52:	202c      	movs	r0, #44	; 0x2c
 8000d54:	f7ff fec8 	bl	8000ae8 <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++) lcdWriteData(colour >> 8, colour);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	81fb      	strh	r3, [r7, #14]
 8000d5c:	e00c      	b.n	8000d78 <lcdClearDisplay+0x6c>
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fedb 	bl	8000b28 <lcdWriteData>
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	3301      	adds	r3, #1
 8000d76:	81fb      	strh	r3, [r7, #14]
 8000d78:	89fb      	ldrh	r3, [r7, #14]
 8000d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d7e:	d9ee      	bls.n	8000d5e <lcdClearDisplay+0x52>
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <lcdPlot>:

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	460b      	mov	r3, r1
 8000d94:	71bb      	strb	r3, [r7, #6]
 8000d96:	4613      	mov	r3, r2
 8000d98:	80bb      	strh	r3, [r7, #4]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8000d9a:	202a      	movs	r0, #42	; 0x2a
 8000d9c:	f7ff fea4 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteParameter(0x1f);
 8000da0:	201f      	movs	r0, #31
 8000da2:	f7ff feb1 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(x);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fead 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x1f);
 8000dae:	201f      	movs	r0, #31
 8000db0:	f7ff feaa 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8000db4:	207f      	movs	r0, #127	; 0x7f
 8000db6:	f7ff fea7 	bl	8000b08 <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8000dba:	202b      	movs	r0, #43	; 0x2b
 8000dbc:	f7ff fe94 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fea1 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(y+32);
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	3320      	adds	r3, #32
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe9b 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff fe98 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x9f);//7f
 8000dd8:	209f      	movs	r0, #159	; 0x9f
 8000dda:	f7ff fe95 	bl	8000b08 <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 8000dde:	202c      	movs	r0, #44	; 0x2c
 8000de0:	f7ff fe82 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	88ba      	ldrh	r2, [r7, #4]
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fe98 	bl	8000b28 <lcdWriteData>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 8000e1e:	883a      	ldrh	r2, [r7, #0]
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 8000e28:	887a      	ldrh	r2, [r7, #2]
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;

	if (dy < 0)
 8000e32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da07      	bge.n	8000e4a <lcdLine+0x4a>
	{
		dy = -dy; stepy = -1;
 8000e3a:	8afb      	ldrh	r3, [r7, #22]
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	82fb      	strh	r3, [r7, #22]
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	823b      	strh	r3, [r7, #16]
 8000e48:	e001      	b.n	8000e4e <lcdLine+0x4e>
	}
	else stepy = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	823b      	strh	r3, [r7, #16]

 	if (dx < 0)
 8000e4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da07      	bge.n	8000e66 <lcdLine+0x66>
	{
		dx = -dx; stepx = -1;
 8000e56:	8abb      	ldrh	r3, [r7, #20]
 8000e58:	425b      	negs	r3, r3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	82bb      	strh	r3, [r7, #20]
 8000e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e62:	827b      	strh	r3, [r7, #18]
 8000e64:	e001      	b.n	8000e6a <lcdLine+0x6a>
	}
	else stepx = 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 8000e6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 8000e72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	88ba      	ldrh	r2, [r7, #4]
 8000e80:	b2d1      	uxtb	r1, r2
 8000e82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff7f 	bl	8000d88 <lcdPlot>

	if (dx > dy) {
 8000e8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dd2e      	ble.n	8000ef4 <lcdLine+0xf4>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 8000e96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e9a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e9e:	1052      	asrs	r2, r2, #1
 8000ea0:	b212      	sxth	r2, r2
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
		while (x0 != x1)
 8000ea6:	e01e      	b.n	8000ee6 <lcdLine+0xe6>
		{
			if (fraction >= 0)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db09      	blt.n	8000ec2 <lcdLine+0xc2>
			{
				y0 += stepy;
 8000eae:	88ba      	ldrh	r2, [r7, #4]
 8000eb0:	8a3b      	ldrh	r3, [r7, #16]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 8000eb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	60fb      	str	r3, [r7, #12]
			}

   			x0 += stepx;
 8000ec2:	88fa      	ldrh	r2, [r7, #6]
 8000ec4:	8a7b      	ldrh	r3, [r7, #18]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	80fb      	strh	r3, [r7, #6]
   			fraction += dy; 				// same as fraction -= 2*dy
 8000ecc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
   			lcdPlot(x0, y0, colour);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	b2d1      	uxtb	r1, r2
 8000ede:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff51 	bl	8000d88 <lcdPlot>

	lcdPlot(x0, y0, colour);

	if (dx > dy) {
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
		while (x0 != x1)
 8000ee6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d1da      	bne.n	8000ea8 <lcdLine+0xa8>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8000ef2:	e02d      	b.n	8000f50 <lcdLine+0x150>
   			lcdPlot(x0, y0, colour);
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
 8000ef4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ef8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000efc:	1052      	asrs	r2, r2, #1
 8000efe:	b212      	sxth	r2, r2
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
		while (y0 != y1)
 8000f04:	e01e      	b.n	8000f44 <lcdLine+0x144>
		{
			if (fraction >= 0)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db09      	blt.n	8000f20 <lcdLine+0x120>
			{
				x0 += stepx;
 8000f0c:	88fa      	ldrh	r2, [r7, #6]
 8000f0e:	8a7b      	ldrh	r3, [r7, #18]
 8000f10:	4413      	add	r3, r2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8000f16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	60bb      	str	r3, [r7, #8]
			}

			y0 += stepy;
 8000f20:	88ba      	ldrh	r2, [r7, #4]
 8000f22:	8a3b      	ldrh	r3, [r7, #16]
 8000f24:	4413      	add	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 8000f2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	4413      	add	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	88ba      	ldrh	r2, [r7, #4]
 8000f3a:	b2d1      	uxtb	r1, r2
 8000f3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff22 	bl	8000d88 <lcdPlot>
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
		while (y0 != y1)
 8000f44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d1da      	bne.n	8000f06 <lcdLine+0x106>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <lcdRectangle>:

// Draw a rectangle between x0, y0 and x1, y1
void lcdRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4604      	mov	r4, r0
 8000f60:	4608      	mov	r0, r1
 8000f62:	4611      	mov	r1, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	80fb      	strh	r3, [r7, #6]
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80bb      	strh	r3, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	807b      	strh	r3, [r7, #2]
 8000f72:	4613      	mov	r3, r2
 8000f74:	803b      	strh	r3, [r7, #0]
	lcdLine(x0, y0, x0, y1, colour);
 8000f76:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000f7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f82:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000f86:	8b3b      	ldrh	r3, [r7, #24]
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	f7ff ff38 	bl	8000e00 <lcdLine>
	lcdLine(x0, y1, x1, y1, colour);
 8000f90:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000f94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f98:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000f9c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000fa0:	8b3b      	ldrh	r3, [r7, #24]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	f7ff ff2b 	bl	8000e00 <lcdLine>
	lcdLine(x1, y0, x1, y1, colour);
 8000faa:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000fae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000fb2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fb6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000fba:	8b3b      	ldrh	r3, [r7, #24]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	f7ff ff1e 	bl	8000e00 <lcdLine>
	lcdLine(x0, y0, x1, y0, colour);
 8000fc4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000fc8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000fcc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fd0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000fd4:	8b3b      	ldrh	r3, [r7, #24]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f7ff ff11 	bl	8000e00 <lcdLine>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	bf00      	nop

08000fe8 <lcdFilledRectangle>:

// Draw a filled rectangle
// Note:	y1 must be greater than y0  and x1 must be greater than x0
//			for this to work
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	80fb      	strh	r3, [r7, #6]
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80bb      	strh	r3, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	807b      	strh	r3, [r7, #2]
 8001002:	4613      	mov	r3, r2
 8001004:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window with the width of the
	// rectangle and then just output the required number of bytes to
	// fill down to the end point

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8001006:	202a      	movs	r0, #42	; 0x2a
 8001008:	f7ff fd6e 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteParameter(0x1f);
 800100c:	201f      	movs	r0, #31
 800100e:	f7ff fd7b 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(x0);
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fd76 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x1f);
 800101c:	201f      	movs	r0, #31
 800101e:	f7ff fd73 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(x1);
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fd6e 	bl	8000b08 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 800102c:	202b      	movs	r0, #43	; 0x2b
 800102e:	f7ff fd5b 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fd68 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(y0+32);
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3320      	adds	r3, #32
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fd61 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fd5e 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(y1+32);
 800104c:	883b      	ldrh	r3, [r7, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	3320      	adds	r3, #32
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fd57 	bl	8000b08 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 800105a:	202c      	movs	r0, #44	; 0x2c
 800105c:	f7ff fd44 	bl	8000ae8 <lcdWriteCommand>

	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 8001060:	2300      	movs	r3, #0
 8001062:	81fb      	strh	r3, [r7, #14]
 8001064:	e00c      	b.n	8001080 <lcdFilledRectangle+0x98>
		lcdWriteData(colour >> 8, colour);;
 8001066:	8c3b      	ldrh	r3, [r7, #32]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	8c3a      	ldrh	r2, [r7, #32]
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd57 	bl	8000b28 <lcdWriteData>
	lcdWriteParameter(0x00);
	lcdWriteParameter(y1+32);

	lcdWriteCommand(WRITE_MEMORY_START);

	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	3301      	adds	r3, #1
 800107e:	81fb      	strh	r3, [r7, #14]
 8001080:	89fa      	ldrh	r2, [r7, #14]
 8001082:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	1acb      	subs	r3, r1, r3
 800108c:	f9b7 0000 	ldrsh.w	r0, [r7]
 8001090:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001094:	1a41      	subs	r1, r0, r1
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	429a      	cmp	r2, r3
 800109c:	dbe3      	blt.n	8001066 <lcdFilledRectangle+0x7e>
		lcdWriteData(colour >> 8, colour);;
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}
 80010a6:	bf00      	nop

080010a8 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4604      	mov	r4, r0
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4623      	mov	r3, r4
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	4603      	mov	r3, r0
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	460b      	mov	r3, r1
 80010c0:	717b      	strb	r3, [r7, #5]
 80010c2:	4613      	mov	r3, r2
 80010c4:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 80010c6:	202a      	movs	r0, #42	; 0x2a
 80010c8:	f7ff fd0e 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteParameter(0x1f);
 80010cc:	201f      	movs	r0, #31
 80010ce:	f7ff fd1b 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(x);
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fd17 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x1f);
 80010da:	201f      	movs	r0, #31
 80010dc:	f7ff fd14 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	3305      	adds	r3, #5
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fd0e 	bl	8000b08 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 80010ec:	202b      	movs	r0, #43	; 0x2b
 80010ee:	f7ff fcfb 	bl	8000ae8 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fd08 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(y+32);
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	3320      	adds	r3, #32
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd02 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fcff 	bl	8000b08 <lcdWriteParameter>
	lcdWriteParameter(0x9f);
 800110a:	209f      	movs	r0, #159	; 0x9f
 800110c:	f7ff fcfc 	bl	8000b08 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001110:	202c      	movs	r0, #44	; 0x2c
 8001112:	f7ff fce9 	bl	8000ae8 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e032      	b.n	8001182 <lcdPutCh+0xda>
	{
		for (column = 0; column < 6; column++)
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
 8001120:	e029      	b.n	8001176 <lcdPutCh+0xce>
		{
			if ((font5x8[character][column]) & (1 << row))
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	7bb9      	ldrb	r1, [r7, #14]
 8001126:	481a      	ldr	r0, [pc, #104]	; (8001190 <lcdPutCh+0xe8>)
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4403      	add	r3, r0
 8001132:	440b      	add	r3, r1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <lcdPutCh+0xb4>
				lcdWriteData(fgColour>>8, fgColour);
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	b29b      	uxth	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fce7 	bl	8000b28 <lcdWriteData>
 800115a:	e009      	b.n	8001170 <lcdPutCh+0xc8>
			else lcdWriteData(bgColour >> 8, bgColour);
 800115c:	8c3b      	ldrh	r3, [r7, #32]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	b29b      	uxth	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	8c3a      	ldrh	r2, [r7, #32]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fcdc 	bl	8000b28 <lcdWriteData>
	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
	{
		for (column = 0; column < 6; column++)
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	3301      	adds	r3, #1
 8001174:	73bb      	strb	r3, [r7, #14]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2b05      	cmp	r3, #5
 800117a:	d9d2      	bls.n	8001122 <lcdPutCh+0x7a>
	lcdWriteParameter(0x9f);

	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	3301      	adds	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b07      	cmp	r3, #7
 8001186:	d9c9      	bls.n	800111c <lcdPutCh+0x74>
			if ((font5x8[character][column]) & (1 << row))
				lcdWriteData(fgColour>>8, fgColour);
			else lcdWriteData(bgColour >> 8, bgColour);
		}
	}
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	08001854 	.word	0x08001854

08001194 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	460b      	mov	r3, r1
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	4613      	mov	r3, r2
 80011a4:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	02db      	lsls	r3, r3, #11
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	019b      	lsls	r3, r3, #6
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	b29b      	uxth	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) { return x*6; }
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	461a      	mov	r2, r3
 80011da:	0052      	lsls	r2, r2, #1
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b087      	sub	sp, #28
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4603      	mov	r3, r0
 8001218:	70fb      	strb	r3, [r7, #3]
 800121a:	460b      	mov	r3, r1
 800121c:	70bb      	strb	r3, [r7, #2]
 800121e:	4613      	mov	r3, r2
 8001220:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e01c      	b.n	8001266 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b79      	cmp	r3, #121	; 0x79
 8001230:	d904      	bls.n	800123c <lcdPutS+0x34>
		{
			x = origin;
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	3308      	adds	r3, #8
 800123a:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 800123c:	78bb      	ldrb	r3, [r7, #2]
 800123e:	2b78      	cmp	r3, #120	; 0x78
 8001240:	d819      	bhi.n	8001276 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	7818      	ldrb	r0, [r3, #0]
 800124a:	883c      	ldrh	r4, [r7, #0]
 800124c:	78ba      	ldrb	r2, [r7, #2]
 800124e:	78f9      	ldrb	r1, [r7, #3]
 8001250:	8c3b      	ldrh	r3, [r7, #32]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4623      	mov	r3, r4
 8001256:	f7ff ff27 	bl	80010a8 <lcdPutCh>
		x += 6;
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	3306      	adds	r3, #6
 800125e:	70fb      	strb	r3, [r7, #3]
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
	uint8_t origin = x;
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	3301      	adds	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	7bfc      	ldrb	r4, [r7, #15]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7fe ff87 	bl	800017c <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	429c      	cmp	r4, r3
 8001272:	d3db      	bcc.n	800122c <lcdPutS+0x24>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 8001274:	e000      	b.n	8001278 <lcdPutS+0x70>
			x = origin;
			y += 8;
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8001276:	bf00      	nop

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}

08001280 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af02      	add	r7, sp, #8
  int i = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  *  system_stm32l1xx.c file
  */

  /* TODO - Add your application code here */

  initSPI2();
 800128c:	f7ff fb1e 	bl	80008cc <initSPI2>
  initCD_Pin();
 8001290:	f7ff fbae 	bl	80009f0 <initCD_Pin>
  initCS_Pin();
 8001294:	f7ff fb8e 	bl	80009b4 <initCS_Pin>
  initRES_Pin();
 8001298:	f7ff fbe0 	bl	8000a5c <initRES_Pin>
  //ssd1306_init();

  lcdInitialise(LCD_ORIENTATION0);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fc59 	bl	8000b54 <lcdInitialise>

  	lcdClearDisplay(decodeRgbValue(0, 0, 0));
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ff74 	bl	8001194 <decodeRgbValue>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fd2c 	bl	8000d0c <lcdClearDisplay>
  	lcdLine(0, 127, 127, 0, decodeRgbValue(31, 31, 31));
  	lcdCircle(64, 64, 32, decodeRgbValue(31, 0, 0));
  	lcdCircle(64, 64, 40, decodeRgbValue(0, 31, 0));
  	lcdCircle(64, 64, 48, decodeRgbValue(0, 0, 31));*/

  	lcdPutS("Tetris", lcdTextX(1), lcdTextY(0), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff ff89 	bl	80011cc <lcdTextX>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461c      	mov	r4, r3
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff ff94 	bl	80011ec <lcdTextY>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461d      	mov	r5, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ff61 	bl	8001194 <decodeRgbValue>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461e      	mov	r6, r3
 80012d6:	221f      	movs	r2, #31
 80012d8:	211f      	movs	r1, #31
 80012da:	201f      	movs	r0, #31
 80012dc:	f7ff ff5a 	bl	8001194 <decodeRgbValue>
 80012e0:	4603      	mov	r3, r0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4633      	mov	r3, r6
 80012e6:	462a      	mov	r2, r5
 80012e8:	4621      	mov	r1, r4
 80012ea:	489b      	ldr	r0, [pc, #620]	; (8001558 <main+0x2d8>)
 80012ec:	f7ff ff8c 	bl	8001208 <lcdPutS>

  	lcdPutS("Level", lcdTextX(1), lcdTextY(2), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff ff6b 	bl	80011cc <lcdTextX>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461c      	mov	r4, r3
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff ff76 	bl	80011ec <lcdTextY>
 8001300:	4603      	mov	r3, r0
 8001302:	461d      	mov	r5, r3
 8001304:	22ff      	movs	r2, #255	; 0xff
 8001306:	21ff      	movs	r1, #255	; 0xff
 8001308:	20ff      	movs	r0, #255	; 0xff
 800130a:	f7ff ff43 	bl	8001194 <decodeRgbValue>
 800130e:	4603      	mov	r3, r0
 8001310:	461e      	mov	r6, r3
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ff3c 	bl	8001194 <decodeRgbValue>
 800131c:	4603      	mov	r3, r0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4633      	mov	r3, r6
 8001322:	462a      	mov	r2, r5
 8001324:	4621      	mov	r1, r4
 8001326:	488d      	ldr	r0, [pc, #564]	; (800155c <main+0x2dc>)
 8001328:	f7ff ff6e 	bl	8001208 <lcdPutS>
  	lcdPutS("1", lcdTextX(1), lcdTextY(3), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff ff4d 	bl	80011cc <lcdTextX>
 8001332:	4603      	mov	r3, r0
 8001334:	461c      	mov	r4, r3
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff ff58 	bl	80011ec <lcdTextY>
 800133c:	4603      	mov	r3, r0
 800133e:	461d      	mov	r5, r3
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	21ff      	movs	r1, #255	; 0xff
 8001344:	20ff      	movs	r0, #255	; 0xff
 8001346:	f7ff ff25 	bl	8001194 <decodeRgbValue>
 800134a:	4603      	mov	r3, r0
 800134c:	461e      	mov	r6, r3
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ff1e 	bl	8001194 <decodeRgbValue>
 8001358:	4603      	mov	r3, r0
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4633      	mov	r3, r6
 800135e:	462a      	mov	r2, r5
 8001360:	4621      	mov	r1, r4
 8001362:	487f      	ldr	r0, [pc, #508]	; (8001560 <main+0x2e0>)
 8001364:	f7ff ff50 	bl	8001208 <lcdPutS>
  	lcdPutS("Score", lcdTextX(1), lcdTextY(5), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff ff2f 	bl	80011cc <lcdTextX>
 800136e:	4603      	mov	r3, r0
 8001370:	461c      	mov	r4, r3
 8001372:	2005      	movs	r0, #5
 8001374:	f7ff ff3a 	bl	80011ec <lcdTextY>
 8001378:	4603      	mov	r3, r0
 800137a:	461d      	mov	r5, r3
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	21ff      	movs	r1, #255	; 0xff
 8001380:	20ff      	movs	r0, #255	; 0xff
 8001382:	f7ff ff07 	bl	8001194 <decodeRgbValue>
 8001386:	4603      	mov	r3, r0
 8001388:	461e      	mov	r6, r3
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff ff00 	bl	8001194 <decodeRgbValue>
 8001394:	4603      	mov	r3, r0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4633      	mov	r3, r6
 800139a:	462a      	mov	r2, r5
 800139c:	4621      	mov	r1, r4
 800139e:	4871      	ldr	r0, [pc, #452]	; (8001564 <main+0x2e4>)
 80013a0:	f7ff ff32 	bl	8001208 <lcdPutS>
  	lcdPutS("46200", lcdTextX(1), lcdTextY(6), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff ff11 	bl	80011cc <lcdTextX>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461c      	mov	r4, r3
 80013ae:	2006      	movs	r0, #6
 80013b0:	f7ff ff1c 	bl	80011ec <lcdTextY>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461d      	mov	r5, r3
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	21ff      	movs	r1, #255	; 0xff
 80013bc:	20ff      	movs	r0, #255	; 0xff
 80013be:	f7ff fee9 	bl	8001194 <decodeRgbValue>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461e      	mov	r6, r3
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fee2 	bl	8001194 <decodeRgbValue>
 80013d0:	4603      	mov	r3, r0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4633      	mov	r3, r6
 80013d6:	462a      	mov	r2, r5
 80013d8:	4621      	mov	r1, r4
 80013da:	4863      	ldr	r0, [pc, #396]	; (8001568 <main+0x2e8>)
 80013dc:	f7ff ff14 	bl	8001208 <lcdPutS>

  	//lcdPutS("Test", 23, 17, 0xFFFF, 0);


  	lcdFilledRectangle(64, 1, 128, 128, decodeRgbValue(0, 0, 0));
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fed5 	bl	8001194 <decodeRgbValue>
 80013ea:	4603      	mov	r3, r0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	2101      	movs	r1, #1
 80013f4:	2040      	movs	r0, #64	; 0x40
 80013f6:	f7ff fdf7 	bl	8000fe8 <lcdFilledRectangle>
  	lcdRectangle(57, 1, 127 , 127, decodeRgbValue(31, 31, 31));
 80013fa:	221f      	movs	r2, #31
 80013fc:	211f      	movs	r1, #31
 80013fe:	201f      	movs	r0, #31
 8001400:	f7ff fec8 	bl	8001194 <decodeRgbValue>
 8001404:	4603      	mov	r3, r0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	237f      	movs	r3, #127	; 0x7f
 800140a:	227f      	movs	r2, #127	; 0x7f
 800140c:	2101      	movs	r1, #1
 800140e:	2039      	movs	r0, #57	; 0x39
 8001410:	f7ff fda2 	bl	8000f58 <lcdRectangle>

	// Run the LCD test
	uint8_t ballX = 70, ballY = 70;
 8001414:	2346      	movs	r3, #70	; 0x46
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	2346      	movs	r3, #70	; 0x46
 800141a:	73bb      	strb	r3, [r7, #14]
	int8_t ballSpeed = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	71fb      	strb	r3, [r7, #7]
	int8_t xDir = ballSpeed, yDir = ballSpeed;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	737b      	strb	r3, [r7, #13]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	733b      	strb	r3, [r7, #12]

  /* Infinite loop */
  while (1)
  {
	  // Delete the ball
	  		lcdFilledRectangle(ballX-2, ballY-1, ballX+2, ballY+2, decodeRgbValue(0, 0, 0));
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	b29b      	uxth	r3, r3
 800142c:	3b02      	subs	r3, #2
 800142e:	b29b      	uxth	r3, r3
 8001430:	b21c      	sxth	r4, r3
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	b29b      	uxth	r3, r3
 8001436:	3b01      	subs	r3, #1
 8001438:	b29b      	uxth	r3, r3
 800143a:	b21d      	sxth	r5, r3
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	b29b      	uxth	r3, r3
 8001440:	3302      	adds	r3, #2
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21e      	sxth	r6, r3
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	b29b      	uxth	r3, r3
 800144a:	3302      	adds	r3, #2
 800144c:	b29b      	uxth	r3, r3
 800144e:	fa0f f883 	sxth.w	r8, r3
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fe9c 	bl	8001194 <decodeRgbValue>
 800145c:	4603      	mov	r3, r0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4643      	mov	r3, r8
 8001462:	4632      	mov	r2, r6
 8001464:	4629      	mov	r1, r5
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fdbe 	bl	8000fe8 <lcdFilledRectangle>
	  		//lcdLine(1, 1, 128, 128, decodeRgbValue(0, 0, 25));
	  		//lcdPutS("o", ballX, ballY, 0, 0);

	  		// Delete the bat
	  		lcdFilledRectangle(ballX-4, 124, ballX+4, 126, decodeRgbValue(0, 0, 0));
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	b29b      	uxth	r3, r3
 8001470:	3b04      	subs	r3, #4
 8001472:	b29b      	uxth	r3, r3
 8001474:	b21c      	sxth	r4, r3
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	b29b      	uxth	r3, r3
 800147a:	3304      	adds	r3, #4
 800147c:	b29b      	uxth	r3, r3
 800147e:	b21d      	sxth	r5, r3
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fe85 	bl	8001194 <decodeRgbValue>
 800148a:	4603      	mov	r3, r0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	237e      	movs	r3, #126	; 0x7e
 8001490:	462a      	mov	r2, r5
 8001492:	217c      	movs	r1, #124	; 0x7c
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff fda7 	bl	8000fe8 <lcdFilledRectangle>

	  		// Move the ball
	  		ballX += xDir;
 800149a:	7b7a      	ldrb	r2, [r7, #13]
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	4413      	add	r3, r2
 80014a0:	73fb      	strb	r3, [r7, #15]
	  		ballY += yDir;
 80014a2:	7b3a      	ldrb	r2, [r7, #12]
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	4413      	add	r3, r2
 80014a8:	73bb      	strb	r3, [r7, #14]

	  		// Range check
	  		if (ballX > 120) xDir = -ballSpeed;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b78      	cmp	r3, #120	; 0x78
 80014ae:	d903      	bls.n	80014b8 <main+0x238>
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	425b      	negs	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	737b      	strb	r3, [r7, #13]
	  		if (ballX < 8) xDir = ballSpeed;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d801      	bhi.n	80014c2 <main+0x242>
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	737b      	strb	r3, [r7, #13]

	  		if (ballY > 120) yDir = -ballSpeed;
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	2b78      	cmp	r3, #120	; 0x78
 80014c6:	d903      	bls.n	80014d0 <main+0x250>
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	425b      	negs	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	733b      	strb	r3, [r7, #12]
	  		if (ballY < 70) yDir = ballSpeed;
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	2b45      	cmp	r3, #69	; 0x45
 80014d4:	d801      	bhi.n	80014da <main+0x25a>
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	733b      	strb	r3, [r7, #12]

	  		// Plot the ball
	  		lcdFilledRectangle(ballX-2, ballY-1, ballX+2, ballY+2, decodeRgbValue(31, 31, 31));
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b02      	subs	r3, #2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b21c      	sxth	r4, r3
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b21d      	sxth	r5, r3
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3302      	adds	r3, #2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21e      	sxth	r6, r3
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3302      	adds	r3, #2
 80014fe:	b29b      	uxth	r3, r3
 8001500:	fa0f f883 	sxth.w	r8, r3
 8001504:	221f      	movs	r2, #31
 8001506:	211f      	movs	r1, #31
 8001508:	201f      	movs	r0, #31
 800150a:	f7ff fe43 	bl	8001194 <decodeRgbValue>
 800150e:	4603      	mov	r3, r0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4643      	mov	r3, r8
 8001514:	4632      	mov	r2, r6
 8001516:	4629      	mov	r1, r5
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fd65 	bl	8000fe8 <lcdFilledRectangle>

	  		//lcdPutS("o", ballX, ballY, 0xFFFF, 0);

	  		// Plot the bat
	  		lcdFilledRectangle(ballX-4, 124, ballX+4, 126, decodeRgbValue(31, 0, 31));
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b04      	subs	r3, #4
 8001524:	b29b      	uxth	r3, r3
 8001526:	b21c      	sxth	r4, r3
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	b29b      	uxth	r3, r3
 800152c:	3304      	adds	r3, #4
 800152e:	b29b      	uxth	r3, r3
 8001530:	b21d      	sxth	r5, r3
 8001532:	221f      	movs	r2, #31
 8001534:	2100      	movs	r1, #0
 8001536:	201f      	movs	r0, #31
 8001538:	f7ff fe2c 	bl	8001194 <decodeRgbValue>
 800153c:	4603      	mov	r3, r0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	237e      	movs	r3, #126	; 0x7e
 8001542:	462a      	mov	r2, r5
 8001544:	217c      	movs	r1, #124	; 0x7c
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff fd4e 	bl	8000fe8 <lcdFilledRectangle>

	  		//lcdPutS("Hello World!", lcdTextX(4), lcdTextY(0), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
	  		Delay(5000);
 800154c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001550:	f000 f80c 	bl	800156c <Delay>
  }
 8001554:	e768      	b.n	8001428 <main+0x1a8>
 8001556:	bf00      	nop
 8001558:	08001830 	.word	0x08001830
 800155c:	08001838 	.word	0x08001838
 8001560:	08001840 	.word	0x08001840
 8001564:	08001844 	.word	0x08001844
 8001568:	0800184c 	.word	0x0800184c

0800156c <Delay>:
				Write_Data(*(n+16*k+i));
				}
}

void Delay(uint16_t n)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
	uint32_t nl = n*2;
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
	while(nl--);
 800157c:	bf00      	nop
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	60fa      	str	r2, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1fa      	bne.n	800157e <Delay+0x12>


	return;
 8001588:	bf00      	nop
}
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop

08001594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001598:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800159a:	e003      	b.n	80015a4 <LoopCopyDataInit>

0800159c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 800159e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015a2:	3104      	adds	r1, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80015a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015ac:	d3f6      	bcc.n	800159c <CopyDataInit>
  ldr r2, =_sbss
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80015b0:	e002      	b.n	80015b8 <LoopFillZerobss>

080015b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015b4:	f842 3b04 	str.w	r3, [r2], #4

080015b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015bc:	d3f9      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015be:	f000 f841 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f000 f903 	bl	80017cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c6:	f7ff fe5b 	bl	8001280 <main>
  bx lr
 80015ca:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015cc:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80015d0:	08001e64 	.word	0x08001e64
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015d8:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80015dc:	20000008 	.word	0x20000008
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80015e0:	20000034 	.word	0x20000034

080015e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_IRQHandler>
	...

080015e8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80015f8:	e7fe      	b.n	80015f8 <HardFault_Handler+0x4>
 80015fa:	bf00      	nop

080015fc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>
 8001602:	bf00      	nop

08001604 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001608:	e7fe      	b.n	8001608 <BusFault_Handler+0x4>
 800160a:	bf00      	nop

0800160c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>
 8001612:	bf00      	nop

08001614 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001648:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <SystemInit+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <SystemInit+0x5c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001652:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001654:	4912      	ldr	r1, [pc, #72]	; (80016a0 <SystemInit+0x5c>)
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <SystemInit+0x5c>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <SystemInit+0x60>)
 800165c:	4013      	ands	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001660:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <SystemInit+0x5c>)
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <SystemInit+0x5c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800166a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800166e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <SystemInit+0x5c>)
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <SystemInit+0x5c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800167c:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <SystemInit+0x5c>)
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <SystemInit+0x5c>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001686:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SystemInit+0x5c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800168e:	f000 f80d 	bl	80016ac <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SystemInit+0x64>)
 8001694:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001698:	609a      	str	r2, [r3, #8]
#endif
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	88ffc00c 	.word	0x88ffc00c
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80016ba:	4a41      	ldr	r2, [pc, #260]	; (80017c0 <SetSysClock+0x114>)
 80016bc:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <SetSysClock+0x114>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80016c6:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <SetSysClock+0x114>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3301      	adds	r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d103      	bne.n	80016e4 <SetSysClock+0x38>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80016e2:	d1f0      	bne.n	80016c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <SetSysClock+0x114>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80016f0:	2301      	movs	r3, #1
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	e001      	b.n	80016fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d15a      	bne.n	80017b6 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001700:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <SetSysClock+0x118>)
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <SetSysClock+0x118>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800170c:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <SetSysClock+0x118>)
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <SetSysClock+0x118>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001718:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <SetSysClock+0x118>)
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <SetSysClock+0x118>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001724:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <SetSysClock+0x114>)
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <SetSysClock+0x114>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <SetSysClock+0x11c>)
 8001732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001736:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001738:	bf00      	nop
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <SetSysClock+0x11c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <SetSysClock+0x114>)
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <SetSysClock+0x114>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <SetSysClock+0x114>)
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <SetSysClock+0x114>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001756:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <SetSysClock+0x114>)
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <SetSysClock+0x114>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <SetSysClock+0x114>)
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <SetSysClock+0x114>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001768:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <SetSysClock+0x114>)
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <SetSysClock+0x114>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001774:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <SetSysClock+0x114>)
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <SetSysClock+0x114>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001780:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001782:	bf00      	nop
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <SetSysClock+0x114>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f9      	beq.n	8001784 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <SetSysClock+0x114>)
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <SetSysClock+0x114>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800179c:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <SetSysClock+0x114>)
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <SetSysClock+0x114>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f043 0303 	orr.w	r3, r3, #3
 80017a6:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80017a8:	bf00      	nop
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SetSysClock+0x114>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d1f9      	bne.n	80017aa <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40023c00 	.word	0x40023c00
 80017c8:	40007000 	.word	0x40007000

080017cc <__libc_init_array>:
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <__libc_init_array+0x3c>)
 80017ce:	b570      	push	{r4, r5, r6, lr}
 80017d0:	461e      	mov	r6, r3
 80017d2:	4c0e      	ldr	r4, [pc, #56]	; (800180c <__libc_init_array+0x40>)
 80017d4:	2500      	movs	r5, #0
 80017d6:	1ae4      	subs	r4, r4, r3
 80017d8:	10a4      	asrs	r4, r4, #2
 80017da:	42a5      	cmp	r5, r4
 80017dc:	d004      	beq.n	80017e8 <__libc_init_array+0x1c>
 80017de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017e2:	4798      	blx	r3
 80017e4:	3501      	adds	r5, #1
 80017e6:	e7f8      	b.n	80017da <__libc_init_array+0xe>
 80017e8:	f000 f816 	bl	8001818 <_init>
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <__libc_init_array+0x44>)
 80017ee:	4c09      	ldr	r4, [pc, #36]	; (8001814 <__libc_init_array+0x48>)
 80017f0:	461e      	mov	r6, r3
 80017f2:	1ae4      	subs	r4, r4, r3
 80017f4:	10a4      	asrs	r4, r4, #2
 80017f6:	2500      	movs	r5, #0
 80017f8:	42a5      	cmp	r5, r4
 80017fa:	d004      	beq.n	8001806 <__libc_init_array+0x3a>
 80017fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001800:	4798      	blx	r3
 8001802:	3501      	adds	r5, #1
 8001804:	e7f8      	b.n	80017f8 <__libc_init_array+0x2c>
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	08001e5c 	.word	0x08001e5c
 800180c:	08001e5c 	.word	0x08001e5c
 8001810:	08001e5c 	.word	0x08001e5c
 8001814:	08001e60 	.word	0x08001e60

08001818 <_init>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	bf00      	nop
 800181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181e:	bc08      	pop	{r3}
 8001820:	469e      	mov	lr, r3
 8001822:	4770      	bx	lr

08001824 <_fini>:
 8001824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001826:	bf00      	nop
 8001828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182a:	bc08      	pop	{r3}
 800182c:	469e      	mov	lr, r3
 800182e:	4770      	bx	lr
